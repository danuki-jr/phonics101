{% block soundBox %}
  {% set count = count ?? 3 %}
  {% set color = color ?? 'random' %}
  {% set colorSet = ['red', 'green', 'orangered', 'blue', 'goldenrod'] %}
  {% if color == 'mixed' %}
    {% set colors = colorSet %}
  {% elseif color == 'random' %}
    {% set randColor = random(colorSet) %}
    {% set colors = [randColor, randColor, randColor, randColor, randColor] %}
  {% else %}
    {% set colors = [color, color, color, color, color] %}
  {% endif %}
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta name="generator"
          content="HTML Tidy for HTML5 (experimental) for Windows https://github.com/w3c/tidy-html5/tree/c63cc39"/>
    <title>Bootstrap Example</title>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
    <meta name="apple-mobile-web-app-status-bar-style" content="black"/>
    <meta name="apple-mobile-web-app-capable" content="yes"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <script src="https://kit.fontawesome.com/12c5ce46e9.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="/css/bootstrap4-custom/bootstrap.css"/>
    <link rel="stylesheet" href="/css/phonics.css"/>

    <script src="/js/jquery-3.5.1.min.js"></script>

    <script src="/js/popper.min.js"></script>
    <script src="/js/bootstrap4-custom/bootstrap.bundle.min.js"></script>
    <script src="/js/drag-and-touch.js"></script>

    <style>
        .box {
            height: 60px;
            width: 60px;
            padding: 3px;
        }

        .box__border {
            border: 3px solid black;
        }

        /*body {position: fixed;}*/
        /*body {width: 360px; height: 380px}*/
    </style>

    <script>
        let soundBoxColor = 'blue';
        let soundBoxCount = 3;

        function dragPiece(ev) {
            ev.dataTransfer.setData("text/plain", ev.target.id);
        }

        function allowDrop(ev) {
            ev.preventDefault();
        }

        function dropOnSquare(ev) {
            ev.preventDefault();
            let data = ev.dataTransfer.getData("text");
            document.getElementById(data).setAttribute("draggable", "false");
            ev.target.innerText = "";
            ev.target.appendChild(document.getElementById(data));
            ev.target.setAttribute("ondrop", "");
            ev.target.setAttribute("ondragover", "");
            moves++;
            if (data.charAt(0) === "r") {
                rats[parseInt(ev.target.id)] = 1;
            } else {
                cats[parseInt(ev.target.id)] = 1;
            }
            setGameStatus();
            if (status.startsWith("WIN")) {
                winner();
            } else if (status === "DRAW") {
                noWinner();
            }
        }

        /**
         * Keeps track of sound-box settings cookie 'readxyz_sound_box'
         * @param cookieValue first char is # of balls, rest of string is html color of balls
         * @param daysToExpire
         */
        function setCookie(cookieValue, daysToExpire) {
            let d = new Date();
            d.setTime(d.getTime() + (daysToExpire * 24 * 60 * 60 * 1000));
            let expires = "expires=" + d.toUTCString();
            document.cookie = "readxyz_sound_box=" + cookieValue + ";" + expires + ";path=/";
        }

        /**
         * find the cookie we're looking for and decode it
         * @returns {string}
         */
        function getCookie() {
            let name = "readxyz_sound_box=";
            let decodedCookie = decodeURIComponent(document.cookie);
            let parts = decodedCookie.split(';');
            for (let i = 0; i < parts.length; i++) {
                let cookieValue = parts[i].trim();

                if (cookieValue.indexOf(name) === 0) {
                    return cookieValue.substring(name.length, cookieValue.length);
                }
            }
            return "";
        }

        /**
         * We try to get the cookie. If we can't find it we create one with default values.
         * We return the values into the global variables color and soundBoxCount
         */
        function checkCookie() {
            let cookieValue = getCookie();
            if (cookieValue !== "") {
                soundBoxCount = parseInt(cookieValue.substring(0, 1));
                soundBoxColor = cookieValue.substring(1);
            } else {
                soundBoxCount = 3;
                soundBoxColor = 'blue'
                cookieValue = '3blue';
                setCookie(cookieValue, 30);
            }
        }

        function setColor(newColor) {
            soundBoxColor = newColor;
            reload();
        }

        function setCount(newCount) {
            if (newCount !== soundBoxCount) {
                soundBoxCount = newCount;
                reload();
            }
        }

        function reload() {
            let countStr = soundBoxCount.toString();
            let cookieValue = countStr + soundBoxColor;
            setCookie(cookieValue, 30);
            window.location.href = '/sound-box.php?count=' + countStr + '&color=' + soundBoxColor;
        }

        $(document).ready(function () {
            checkCookie();
        });

    </script>
  </head>

  <body style="border: 2px solid grey; height: 300px; width:95%">
  <div id="game_container" class="container">
    <div class="row d-flex justify-content-center">
      <h1 class="my-2 col tac">Sound Boxes</h1>
    </div>
    {# Botton Row start #}
    <div class="row d-flex justify-content-center">

      {# The button to select the ball color #}
      <div class="btn-group my-3 mx-1 p-0 col">
        <button id="color-button" type="button" class="btn  btn-sm btn-primary dropdown-toggle"
                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Color
        </button>
        <div class="dropdown-menu" aria-labelledby="color-button">
          <a class="dropdown-item" href="#" onclick="setColor('red')"><i class="fas fa-circle fa-2x" style="color:red"></i></a>
          <a class="dropdown-item" href="#" onclick="setColor('green')"><i class="fas fa-circle fa-2x" style="color:green"></i> </a>
          <a class="dropdown-item" href="#" onclick="setColor('orangered')"><i class="fas fa-circle fa-2x" style="color:orangered"></i> </a>
          <a class="dropdown-item" href="#" onclick="setColor('blue')"><i class="fas fa-circle fa-2x" style="color:blue"></i> </a>
          <a class="dropdown-item" href="#" onclick="setColor('goldenrod')"><i class="fas fa-circle fa-2x" style="color:goldenrod"></i> </a>
          <div class="dropdown-divider"></div>
          <a class="dropdown-item" onclick="setColor('mixed')" href="#">Multi-color</a>
        </div>
      </div>

      {# The button to select the number of balls #}
      <div class="btn-group  my-3 mx-1 p-0 col">
        <button id="count-button" type="button" class="btn btn-sm btn-primary dropdown-toggle"
                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Count
        </button>
        <div class="dropdown-menu" aria-labelledby="count-button">
          <a class="dropdown-item" href="#" onclick="setCount(3)"><span class="h3">3</span></a>
          <a class="dropdown-item" href="#" onclick="setCount(4)"><span class="h3">4</span></a>
          <a class="dropdown-item" href="#" onclick="setCount(5)"><span class="h3">5</span></a>
        </div>
      </div>

      {# The reset button #}
      <div class="btn-group  my-3 mx-1 p-0 col">
        <button type="button" class="btn btn-primary btn-sm px-2" onclick="reload()">Reset</button>
      </div>
    </div>
    {# Botton Row start #}

    {# Receptacle Boxes Row -- Start #}
    <div class="row d-flex justify-content-center flex-nowrap mb-2 ">
      {% for i in range(0,count - 1) %}
        <div id="box-{{ i }}" class="box box__border receptacle"></div>
      {% endfor %}
    </div>
    {# Receptacle Boxes Row -- End #}

    {# Balls Row -- Start #}
    <div class="row d-flex justify-content-center flex-nowrap">
      {% for i in range(0,count -1) %}
        <div class="box">
          <div id="ball-{{ i }}" class="m-1 p-0 mover">
            <i class="fas fa-circle  tac" style="color:{{ colors[loop.index0] }}; font-size: 48px"></i>
          </div>
        </div>
      {% endfor %}
    </div>
    {# Balls Row -- End #}
  </div>
  </body>
  </html>
{% endblock %}
